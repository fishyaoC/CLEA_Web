@using Clea_Web.Models;
@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@model Clea_Web.ViewModels.SysCodeViewModel.Modify
@{
    Layout = "~/Views/Shared/_LayoutBackEnd.cshtml";
    dbContext db = new dbContext();
}

<div class="content-wrapper">
    <form class="form-sample" method="post" action="@Url.Action("Modify","Sys_Code")">
        <div class="mb-2 mt-2">
            <button type="submit" class="btn btn-info">儲存</button>
            @* <button type="button" class="btn btn-secondary">取消</button> *@
            <a href="@Url.Action("Index","Sys_Code")" class="btn btn-secondary">取消</a>
        </div>
        <div class="row">
            <div class="col-12 grid-margin stretch-card">
                <div class="card">
                    <div class="card-body">
                        <h4 class="card-title">
                            選單代碼管理 - @(Model.IsEdit ? "編輯" : "新增")
                        </h4>
                        @Html.AntiForgeryToken()
                        @*回傳狀態*@
                        @Html.HiddenFor(x => x.IsEdit)
                        @*回傳Uid*@
                        @Html.HiddenFor(x => x.Uid)
                        @* <p class="card-description">
                        後臺腳色權限管理-編輯
                        </p> *@
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group row">
                                    @Html.LabelFor(x => x.CItemName, new { @class = "col-sm-3 col-form-label" })
                                    <div class="col-sm-9">
                                        @Html.TextBoxFor(x => x.CItemName, new { @class = "form-control form-control", placeholder = "選單名稱" })
                                        @Html.ValidationMessageFor(x=>x.CItemName)
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group row">
                                    @Html.LabelFor(x => x.CItemCode, new { @class = "col-sm-3 col-form-label" })
                                    <div class="col-sm-9">
                                        @if (Model.IsEdit)
                                        {
                                            @Html.TextBoxFor(x => x.CItemCode, new { @class = "form-control form-control", placeholder = "選單代碼", disabled = "disabled" })
                                            @Html.ValidationMessageFor(x=>x.CItemCode)
                                        }
                                        else
                                        {
                                            @Html.TextBoxFor(x => x.CItemCode, new { @class = "form-control form-control", placeholder = "選單代碼" })
                                            @Html.ValidationMessageFor(x=>x.CItemCode)
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-sm-3 col-form-label">是否啟用</label>
                                    @* @Html.LabelFor(x=> x.RStatus, new { @class="col-sm-3 col-form-label" }) *@

                                    <div class="col-sm-9 d-flex justify-content-around">
                                        <div class="form-check">
                                            @Html.RadioButtonFor(x => x.IsActive, true, new { @class = "form-check-input", @name = "IsActive" })
                                            <label for="MTypeB">
                                                是
                                            </label>
                                        </div>
                                        <div class="form-check">
                                            @Html.RadioButtonFor(x => x.IsActive, false, new {@class = "form-check-input", @name = "IsActive" })
                                            <label for="MTypeP">
                                                否
                                            </label>
                                        </div>                                     
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-sm-3 col-form-label">是否上架</label>
                                    @* @Html.LabelFor(x=> x.RStatus, new { @class="col-sm-3 col-form-label" }) *@
                                    <div class="col-sm-9 d-flex justify-content-around">
                                        <div class="form-check">
                                            @Html.RadioButtonFor(x => x.IsShow, true, new {@class = "form-check-input", @name = "IsShow" })
                                            <label for="S1">
                                                是
                                            </label>
                                        </div>
                                        <div class="form-check">
                                            @Html.RadioButtonFor(x => x.IsShow, false, new {@class = "form-check-input", @name = "IsShow" })
                                            <label for="S0">
                                                否
                                            </label>
                                        </div>                                       
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group row">
                                    <label class="col-sm-3 col-form-label">選單內容(選項)</label>
                                    <div class="col-12 grid-margin stretch-card">
                                        <div class="card">
                                            <div class="card-body" style="background-color:#D0D0D0; border-radius:8px">
                                                <div class="form-group">
                                                <button  type="button" class="btn btn-info" id="addNew">+新增</button>
                                                </div>
                                                <div>
                                                <h4 style="color:red;">若要刪除選項，請聯繫系統管理員</h4>
                                                </div>
                                                <div id="modifyContainer" class="form-group row">
                                                    @if (Model.modifies != null)
                                                    {
                                                        var count = 1;
                                                        @foreach (var child in Model.modifies)
                                                        {
                                                            @* @Html.HiddenFor(x => x.modifies[count-1].Order) *@
                                                            <div class="col-md-8">
                                                                <!-- Combined the columns into one -->
                                                                <div class="form-group row modifies">
                                                                    @Html.HiddenFor(x => x.modifies[count-1].Uid)
                                                                    <div class="col-sm-1">
                                                                        @* <label class="col-sm-1 col-form-label count">@Model.modifies[count-1].Order</label> *@
                                                                        @Html.TextBoxFor(x => x.modifies[count-1].Order, new { @class = "form-control form-control", @readonly = "readonly"})
                                                                    </div>
                                                                    <div class="col-sm-8">
                                                                        @Html.TextBoxFor(x => x.modifies[count-1].CItemName, new { @class = "form-control form-control", placeholder = "選單內容" })
                                                                    </div>
@*                                                                     <div class="col-sm-3">
                                                                        <button type="button" style="border-radius:50%;" class="ti-plus btn-icon btn btn-primary btn-rounded addButton"></button>
                                                                        <button type="button" style="border-radius:50%;" class="ti-close btn-icon btn btn-danger btn-rounded removeButton"></button>
                                                                    </div> *@
                                                                </div>
                                                            </div>
                                                            count++;
                                                        }
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </form>
</div>


<script>
    document.addEventListener("DOMContentLoaded", function() {
        var addNewButton = document.getElementById("addNew");
        addNewButton.addEventListener("click", function() {
            var modifyContainer = document.getElementById("modifyContainer");
            var count = modifyContainer.querySelectorAll(".modifies").length + 1;

            var newDiv = document.createElement("div");
            newDiv.className = "col-md-8";

            var innerHTML = '<div class="form-group row modifies">' +
                                '<div class="col-sm-1">' +
                                    '<input type="text" class="form-control form-control" readonly="readonly" name="modifies[' + (count-1) + '].Order" value="' + count + '">' +
                                '</div>' +
                                '<div class="col-sm-8">' +
                                    '<input type="text" class="form-control form-control" name="modifies[' + (count-1) + '].CItemName" placeholder="選單內容">' +
                                '</div>' +
                                @* '<div class="col-sm-3">' +
                                    '<button type="button" style="border-radius:50%;" class="ti-plus btn-icon btn btn-primary btn-rounded addButton"></button>' +
                                    '<button type="button" style="border-radius:50%;" class="ti-close btn-icon btn btn-danger btn-rounded removeButton"></button>' +
                                '</div>' + *@
                            '</div>';

            newDiv.innerHTML = innerHTML;

            modifyContainer.appendChild(newDiv);
        });

            document.addEventListener("click", function(event) {
            if (event.target.classList.contains("removeButton")) {
                var rowToRemove = event.target.closest(".col-md-8");
                rowToRemove.remove();

                var modifyContainer = document.getElementById("modifyContainer");
                var rows = modifyContainer.querySelectorAll(".modifies");
                rows.forEach(function(row, index) {
                    var orderInput = row.querySelector("input[name^='modifies']");
                    orderInput.value = index + 1;
                });
            }
        });
    });



    @* document.getElementById("addNew").addEventListener("click", function () {
        var container = document.getElementById("modifyContainer");
        var count = container.querySelectorAll(".col-md-8").length + 1;

        var newRow = document.createElement("div");
        newRow.classList.add("col-md-8");

        var newFormGroup = document.createElement("div");
        newFormGroup.classList.add("form-group", "row");

        var label = document.createElement("label");
        label.classList.add("col-sm-1", "col-form-label", "count");
        label.textContent = count;

        var inputDiv = document.createElement("div");
        inputDiv.classList.add("col-sm-8");

        var input = document.createElement("input");
        input.setAttribute("type", "text");
        input.setAttribute("class", "form-control form-control");
        input.setAttribute("placeholder", "選單內容");
        input.setAttribute("name", "modifies[" + (count - 1) + "].CItemName");

        inputDiv.appendChild(input);
        newFormGroup.appendChild(label);
        newFormGroup.appendChild(inputDiv);

        var buttonDiv = document.createElement("div");
        buttonDiv.classList.add("col-sm-3");

        var plusButton = document.createElement("button");
        plusButton.setAttribute("type", "button");
        plusButton.setAttribute("style", "border-radius:50%;");
        plusButton.classList.add("ti-plus", "btn-icon", "btn", "btn-primary", "btn-rounded", "addButton");

        var closeButton = document.createElement("button");
        closeButton.setAttribute("type", "button");
        closeButton.setAttribute("style", "border-radius:50%;");
        closeButton.classList.add("ti-close", "btn-icon", "btn", "btn-danger", "btn-rounded", "removeButton");

        buttonDiv.appendChild(plusButton);
        buttonDiv.appendChild(closeButton);

        newFormGroup.appendChild(buttonDiv);
        newRow.appendChild(newFormGroup);

        container.appendChild(newRow);

        updateHiddenFieldOrder(container); // Update hidden field order

        addRemoveButtonListener();
    });

    function updateHiddenFieldOrder(container) {
        var rows = container.querySelectorAll('.col-md-8');
        rows.forEach(function (row, index) {
            var label = row.querySelector('.col-form-label');
            label.textContent = index + 1;

            // Update HiddenFor value
            var hiddenField = row.querySelector('input[type="hidden"]');
            hiddenField.value = index + 1;
        });
    }

    document.addEventListener("click", function (event) {
        if (event.target.classList.contains('addButton')) {
            var container = document.getElementById("modifyContainer");
            var count = container.querySelectorAll(".col-md-8").length + 1;

            var newRow = document.createElement("div");
            newRow.classList.add("col-md-8");

            var newFormGroup = document.createElement("div");
            newFormGroup.classList.add("form-group", "row");

            var label = document.createElement("label");
            label.classList.add("col-sm-1", "col-form-label", "count");
            label.textContent = count;

            var inputDiv = document.createElement("div");
            inputDiv.classList.add("col-sm-8");

            var input = document.createElement("input");
            input.setAttribute("type", "text");
            input.setAttribute("class", "form-control form-control");
            input.setAttribute("placeholder", "選單內容");
            input.setAttribute("name", "modifies[" + (count - 1) + "].CItemName");

            inputDiv.appendChild(input);
            newFormGroup.appendChild(label);
            newFormGroup.appendChild(inputDiv);

            var buttonDiv = document.createElement("div");
            buttonDiv.classList.add("col-sm-3");

            var plusButton = document.createElement("button");
            plusButton.setAttribute("type", "button");
            plusButton.setAttribute("style", "border-radius:50%;");
            plusButton.classList.add("ti-plus", "btn-icon", "btn", "btn-primary", "btn-rounded", "addButton");

            var closeButton = document.createElement("button");
            closeButton.setAttribute("type", "button");
            closeButton.setAttribute("style", "border-radius:50%;");
            closeButton.classList.add("ti-close", "btn-icon", "btn", "btn-danger", "btn-rounded", "removeButton");

            buttonDiv.appendChild(plusButton);
            buttonDiv.appendChild(closeButton);

            newFormGroup.appendChild(buttonDiv);
            newRow.appendChild(newFormGroup);

            var row = event.target.closest('.col-md-8');
            container.insertBefore(newRow, row.nextSibling);

            updateHiddenFieldOrder(container); // Update hidden field order

            addRemoveButtonListener();
        }
    });

    function addRemoveButtonListener() {
        var removeButtons = document.querySelectorAll(".removeButton");
        removeButtons.forEach(function (button) {
            button.addEventListener("click", function () {
                var container = document.getElementById("modifyContainer");
                var rowToRemove = this.parentNode.parentNode.parentNode;
                var rows = container.querySelectorAll('.col-md-8');

                rowToRemove.remove();

                updateHiddenFieldOrder(container); // Update hidden field order
            });
        });
    }

    addRemoveButtonListener(); // Adding listener initially *@

</script>